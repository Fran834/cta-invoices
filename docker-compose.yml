version: '3.8'

services:

  hasura:
    image: hasura/graphql-engine:v2.1.1    
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${HASURA_PORT:-8080}:8080"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres
      HASURA_GRAPHQL_ADMIN_SECRET: "${HASURA_ADMIN_SECRET:-hasura}"
      HASURA_GRAPHQL_JWT_SECRET: '{"type":"HS256", "key": "${HASURA_JWT_SECRET:-h2leOvdgjwpV0As5L8rZlV3VDVOsOmwk}"}'
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: "anonymous"
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      # AUTH_BASE_URL: http://auth:8080    
      MULTI_BASE_URL: http://invoices:4000

  postgres:
    image: postgres:13.4    
    volumes:
      - ./.docker-data/pg:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 20

  adminer:
    image: adminer:4.7
    links:
      - postgres:db
    ports:
      - "${ADMINER_PORT:-8008}:8080"    
    depends_on:
      postgres:
        condition: service_healthy
  
  # ctainvoices:
  #   image: ctainvoices
  #   build:
  #     context: .
  #     dockerfile: ./Dockerfile
  #   ports:
  #     - "${INVOICE_PORT:-4000}:4000"
  #   volumes:
  #     - ./app/src:/usr/src/app/src:delegated
  #   environment:
  #     NODE_ENV: development
  #     HASURA_ENDPOINT: http://hasura:8080/v1/graphql
  #   healthcheck:
  #     test: ["CMD", "wget", "-qO", "-", "http://invoices:4000/healthz"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 20